/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201907221223.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v0/DCU/Telephony/ConnectionManagerSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace DCU {
namespace Telephony {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createConnectionManagerSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< ConnectionManagerSomeIPProxy>(_address, _connection);
}

void initializeConnectionManagerSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:DCU.Telephony.ConnectionManager:v0_93:DCU.Telephony.ConnectionManager",
        0x18c6, 0x1801, 0, 93);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         ConnectionManager::getInterface(),
         &createConnectionManagerSomeIPProxy);
}

INITIALIZER(registerConnectionManagerSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeConnectionManagerSomeIPProxy);
}

ConnectionManagerSomeIPProxy::ConnectionManagerSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          contextAdded_(*this, 0x1001, CommonAPI::SomeIP::event_id_t(0x9001), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t* >(nullptr))),
          contextRemoved_(*this, 0x1001, CommonAPI::SomeIP::event_id_t(0x9002), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
    {
    }


    ConnectionManagerSomeIPProxy::ContextAddedEvent& ConnectionManagerSomeIPProxy::getContextAddedEvent() {
        return contextAdded_;
    }
    ConnectionManagerSomeIPProxy::ContextRemovedEvent& ConnectionManagerSomeIPProxy::getContextRemovedEvent() {
        return contextRemoved_;
    }

    /*
     * description: 
     * Deactivates all active contexts
     */
        void ConnectionManagerSomeIPProxy::DeactivateAll(CommonAPI::CallStatus &_internalCallStatus, ::v0::DCU::Telephony::ConnectionContextTypes::ContextError &_error, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::ContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::ContextErrorDeployment_t> deploy_error(static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::ContextErrorDeployment_t * >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        ::v0::DCU::Telephony::ConnectionContextTypes::ContextError,
                        ::v0::DCU::Telephony::ConnectionContextTypes_::ContextErrorDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1001),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    _internalCallStatus,
    deploy_error);
    _error = deploy_error.getValue();
    }
    std::future<CommonAPI::CallStatus> ConnectionManagerSomeIPProxy::DeactivateAllAsync(DeactivateAllAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::ContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::ContextErrorDeployment_t> deploy_error(static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::ContextErrorDeployment_t * >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    ::v0::DCU::Telephony::ConnectionContextTypes::ContextError,
                    ::v0::DCU::Telephony::ConnectionContextTypes_::ContextErrorDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1001),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::ContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::ContextErrorDeployment_t > _deploy_error) {
                if (_callback)
                    _callback(_internalCallStatus, _deploy_error.getValue());
            },
            std::make_tuple(deploy_error));
    }
    /*
     * description: 
     * Creates a new Primary context. The type contains the intended purpose of the context.
     */
        void ConnectionManagerSomeIPProxy::AddContext(const std::string &_APN, const std::string &_IP_Protocol, CommonAPI::CallStatus &_internalCallStatus, ::v0::DCU::Telephony::ConnectionContextTypes::AddContextError &_error, std::string &_ContextID, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::AddContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::AddContextErrorDeployment_t> deploy_error(static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::AddContextErrorDeployment_t * >(nullptr));
            CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_APN(_APN, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_IP_Protocol(_IP_Protocol, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_ContextID(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        std::string,
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        std::string,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        ::v0::DCU::Telephony::ConnectionContextTypes::AddContextError,
                        ::v0::DCU::Telephony::ConnectionContextTypes_::AddContextErrorDeployment_t
                    >,
                    CommonAPI::Deployable<
                        std::string,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1002),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_APN, deploy_IP_Protocol,
    _internalCallStatus,
    deploy_error,
    deploy_ContextID);
    _error = deploy_error.getValue();
    _ContextID = deploy_ContextID.getValue();
    }
    std::future<CommonAPI::CallStatus> ConnectionManagerSomeIPProxy::AddContextAsync(const std::string &_APN, const std::string &_IP_Protocol, AddContextAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::AddContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::AddContextErrorDeployment_t> deploy_error(static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::AddContextErrorDeployment_t * >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_APN(_APN, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_IP_Protocol(_IP_Protocol, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_ContextID(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    std::string,
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    std::string,
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    ::v0::DCU::Telephony::ConnectionContextTypes::AddContextError,
                    ::v0::DCU::Telephony::ConnectionContextTypes_::AddContextErrorDeployment_t
                >,
                CommonAPI::Deployable<
                    std::string,
                    CommonAPI::SomeIP::StringDeployment
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1002),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_APN, deploy_IP_Protocol,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::AddContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::AddContextErrorDeployment_t > _deploy_error, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _ContextID) {
                if (_callback)
                    _callback(_internalCallStatus, _deploy_error.getValue(), _ContextID.getValue());
            },
            std::make_tuple(deploy_error, deploy_ContextID));
    }
    /*
     * description: 
     * Removes a primary context. All secondary contexts,
     * if any, associated with the primary context are also removed.
     */
        void ConnectionManagerSomeIPProxy::RemoveContext(const std::string &_ContextID, CommonAPI::CallStatus &_internalCallStatus, ::v0::DCU::Telephony::ConnectionContextTypes::RemoveContextError &_error, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::RemoveContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::RemoveContextErrorDeployment_t> deploy_error(static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::RemoveContextErrorDeployment_t * >(nullptr));
            CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_ContextID(_ContextID, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        std::string,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        ::v0::DCU::Telephony::ConnectionContextTypes::RemoveContextError,
                        ::v0::DCU::Telephony::ConnectionContextTypes_::RemoveContextErrorDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1003),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_ContextID,
    _internalCallStatus,
    deploy_error);
    _error = deploy_error.getValue();
    }
    std::future<CommonAPI::CallStatus> ConnectionManagerSomeIPProxy::RemoveContextAsync(const std::string &_ContextID, RemoveContextAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::RemoveContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::RemoveContextErrorDeployment_t> deploy_error(static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::RemoveContextErrorDeployment_t * >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_ContextID(_ContextID, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    std::string,
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    ::v0::DCU::Telephony::ConnectionContextTypes::RemoveContextError,
                    ::v0::DCU::Telephony::ConnectionContextTypes_::RemoveContextErrorDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1003),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_ContextID,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::RemoveContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::RemoveContextErrorDeployment_t > _deploy_error) {
                if (_callback)
                    _callback(_internalCallStatus, _deploy_error.getValue());
            },
            std::make_tuple(deploy_error));
    }
    /*
     * description: 
     * Gets the registered connection contexts on the modem.
     */
        void ConnectionManagerSomeIPProxy::GetContexts(CommonAPI::CallStatus &_internalCallStatus, std::vector< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem > &_items, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< std::vector< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem >, CommonAPI::SomeIP::ArrayDeployment< ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t >> deploy_items(static_cast< CommonAPI::SomeIP::ArrayDeployment< ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t >* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        std::vector< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem >,
                        CommonAPI::SomeIP::ArrayDeployment< ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t >
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1004),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    _internalCallStatus,
    deploy_items);
    _items = deploy_items.getValue();
    }
    std::future<CommonAPI::CallStatus> ConnectionManagerSomeIPProxy::GetContextsAsync(GetContextsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< std::vector< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem >, CommonAPI::SomeIP::ArrayDeployment< ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t >> deploy_items(static_cast< CommonAPI::SomeIP::ArrayDeployment< ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t >* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    std::vector< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem >,
                    CommonAPI::SomeIP::ArrayDeployment< ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t >
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1004),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::vector< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem >, CommonAPI::SomeIP::ArrayDeployment< ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t > > _items) {
                if (_callback)
                    _callback(_internalCallStatus, _items.getValue());
            },
            std::make_tuple(deploy_items));
    }
    /*
     * description: 
     * Gets the registered connection context wite ContextID on the modem.
     */
        void ConnectionManagerSomeIPProxy::GetContext(const std::string &_ContextID, CommonAPI::CallStatus &_internalCallStatus, ::v0::DCU::Telephony::ConnectionContextTypes::GetContextError &_error, ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem &_item, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::GetContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::GetContextErrorDeployment_t> deploy_error(static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::GetContextErrorDeployment_t * >(nullptr));
            CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_ContextID(_ContextID, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem, ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t> deploy_item(static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        std::string,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        ::v0::DCU::Telephony::ConnectionContextTypes::GetContextError,
                        ::v0::DCU::Telephony::ConnectionContextTypes_::GetContextErrorDeployment_t
                    >,
                    CommonAPI::Deployable<
                        ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem,
                        ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1005),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_ContextID,
    _internalCallStatus,
    deploy_error,
    deploy_item);
    _error = deploy_error.getValue();
    _item = deploy_item.getValue();
    }
    std::future<CommonAPI::CallStatus> ConnectionManagerSomeIPProxy::GetContextAsync(const std::string &_ContextID, GetContextAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::GetContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::GetContextErrorDeployment_t> deploy_error(static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::GetContextErrorDeployment_t * >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_ContextID(_ContextID, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem, ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t> deploy_item(static_cast< ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    std::string,
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    ::v0::DCU::Telephony::ConnectionContextTypes::GetContextError,
                    ::v0::DCU::Telephony::ConnectionContextTypes_::GetContextErrorDeployment_t
                >,
                CommonAPI::Deployable<
                    ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem,
                    ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1005),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_ContextID,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::GetContextError, ::v0::DCU::Telephony::ConnectionContextTypes_::GetContextErrorDeployment_t > _deploy_error, CommonAPI::Deployable< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem, ::v0::DCU::Telephony::ConnectionContextTypes_::ConnectionContextItemDeployment_t > _item) {
                if (_callback)
                    _callback(_internalCallStatus, _deploy_error.getValue(), _item.getValue());
            },
            std::make_tuple(deploy_error, deploy_item));
    }



    void ConnectionManagerSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 93;
    }

} // namespace Telephony
} // namespace DCU
} // namespace v0
