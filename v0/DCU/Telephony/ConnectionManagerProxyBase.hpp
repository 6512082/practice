/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_DCU_TELEPHONY_Connection_Manager_PROXY_BASE_HPP_
#define V0_DCU_TELEPHONY_Connection_Manager_PROXY_BASE_HPP_

#include <v0/DCU/Telephony/ConnectionManager.hpp>


#include <v0/DCU/Telephony/ConnectionContextTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace DCU {
namespace Telephony {

class ConnectionManagerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        std::string, ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem
    > ContextAddedEvent;
    typedef CommonAPI::Event<
        std::string
    > ContextRemovedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::DCU::Telephony::ConnectionContextTypes::ContextError&)> DeactivateAllAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::DCU::Telephony::ConnectionContextTypes::AddContextError&, const std::string&)> AddContextAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::DCU::Telephony::ConnectionContextTypes::RemoveContextError&)> RemoveContextAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem >&)> GetContextsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::DCU::Telephony::ConnectionContextTypes::GetContextError&, const ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem&)> GetContextAsyncCallback;


    /*
     * description: 
     * This event indicates that the ConnectionContext has added.
     */
    virtual ContextAddedEvent& getContextAddedEvent() = 0;
    /*
     * description: 
     * This event indicates that the ConnectionContext has removed
     */
    virtual ContextRemovedEvent& getContextRemovedEvent() = 0;

    /*
     * description: 
     * Deactivates all active contexts
     */
    virtual void DeactivateAll(CommonAPI::CallStatus &_internalCallStatus, ::v0::DCU::Telephony::ConnectionContextTypes::ContextError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> DeactivateAllAsync(DeactivateAllAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Creates a new Primary context. The type contains the intended purpose of the context.
     */
    virtual void AddContext(const std::string &_APN, const std::string &_IP_Protocol, CommonAPI::CallStatus &_internalCallStatus, ::v0::DCU::Telephony::ConnectionContextTypes::AddContextError &_error, std::string &_ContextID, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> AddContextAsync(const std::string &_APN, const std::string &_IP_Protocol, AddContextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Removes a primary context. All secondary contexts,
     * if any, associated with the primary context are also removed.
     */
    virtual void RemoveContext(const std::string &_ContextID, CommonAPI::CallStatus &_internalCallStatus, ::v0::DCU::Telephony::ConnectionContextTypes::RemoveContextError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> RemoveContextAsync(const std::string &_ContextID, RemoveContextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Gets the registered connection contexts on the modem.
     */
    virtual void GetContexts(CommonAPI::CallStatus &_internalCallStatus, std::vector< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem > &_items, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetContextsAsync(GetContextsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Gets the registered connection context wite ContextID on the modem.
     */
    virtual void GetContext(const std::string &_ContextID, CommonAPI::CallStatus &_internalCallStatus, ::v0::DCU::Telephony::ConnectionContextTypes::GetContextError &_error, ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem &_item, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetContextAsync(const std::string &_ContextID, GetContextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace Telephony
} // namespace DCU
} // namespace v0


// Compatibility
namespace v0_93 = v0;

#endif // V0_DCU_TELEPHONY_Connection_Manager_PROXY_BASE_HPP_
