/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_DCU_TELEPHONY_Connection_Manager_STUB_HPP_
#define V0_DCU_TELEPHONY_Connection_Manager_STUB_HPP_

#include <functional>
#include <sstream>



#include <v0/DCU/Telephony/ConnectionContextTypes.hpp>

#include <v0/DCU/Telephony/ConnectionManager.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>


#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace DCU {
namespace Telephony {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ConnectionManager. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ConnectionManagerStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual ConnectionManager {
 public:

    /**
    * Sends a broadcast event for ContextAdded. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireContextAddedEvent(const std::string &_ContextID, const ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem &_item) = 0;
    /**
    * Sends a broadcast event for ContextRemoved. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireContextRemovedEvent(const std::string &_ContextID) = 0;


    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ConnectionManager.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ConnectionManagerStubRemoteEvent
{
public:
    virtual ~ConnectionManagerStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ConnectionManager to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ConnectionManagerStub
    : public virtual CommonAPI::Stub<ConnectionManagerStubAdapter, ConnectionManagerStubRemoteEvent>
{
public:
    typedef std::function<void (::v0::DCU::Telephony::ConnectionContextTypes::ContextError _error)>DeactivateAllReply_t;
    typedef std::function<void (::v0::DCU::Telephony::ConnectionContextTypes::AddContextError _error, std::string _ContextID)>AddContextReply_t;
    typedef std::function<void (::v0::DCU::Telephony::ConnectionContextTypes::RemoveContextError _error)>RemoveContextReply_t;
    typedef std::function<void (std::vector< ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem > _items)>GetContextsReply_t;
    typedef std::function<void (::v0::DCU::Telephony::ConnectionContextTypes::GetContextError _error, ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem _item)>GetContextReply_t;

    virtual ~ConnectionManagerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }


    /*
     * description: 
     * Deactivates all active contexts
     */
    /// This is the method that will be called on remote calls on the method DeactivateAll.
    virtual void DeactivateAll(const std::shared_ptr<CommonAPI::ClientId> _client, DeactivateAllReply_t _reply) = 0;
    /*
     * description: 
     * Creates a new Primary context. The type contains the intended purpose of the context.
     */
    /// This is the method that will be called on remote calls on the method AddContext.
    virtual void AddContext(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _APN, std::string _IP_Protocol, AddContextReply_t _reply) = 0;
    /*
     * description: 
     * Removes a primary context. All secondary contexts,
     * if any, associated with the primary context are also removed.
     */
    /// This is the method that will be called on remote calls on the method RemoveContext.
    virtual void RemoveContext(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _ContextID, RemoveContextReply_t _reply) = 0;
    /*
     * description: 
     * Gets the registered connection contexts on the modem.
     */
    /// This is the method that will be called on remote calls on the method GetContexts.
    virtual void GetContexts(const std::shared_ptr<CommonAPI::ClientId> _client, GetContextsReply_t _reply) = 0;
    /*
     * description: 
     * Gets the registered connection context wite ContextID on the modem.
     */
    /// This is the method that will be called on remote calls on the method GetContext.
    virtual void GetContext(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _ContextID, GetContextReply_t _reply) = 0;
    /*
     * description: 
     * This event indicates that the ConnectionContext has added.
     */
    /// Sends a broadcast event for ContextAdded.
    virtual void fireContextAddedEvent(const std::string &_ContextID, const ::v0::DCU::Telephony::ConnectionContextTypes::ConnectionContextItem &_item) {
        auto stubAdapter = CommonAPI::Stub<ConnectionManagerStubAdapter, ConnectionManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireContextAddedEvent(_ContextID, _item);
    }
    /*
     * description: 
     * This event indicates that the ConnectionContext has removed
     */
    /// Sends a broadcast event for ContextRemoved.
    virtual void fireContextRemovedEvent(const std::string &_ContextID) {
        auto stubAdapter = CommonAPI::Stub<ConnectionManagerStubAdapter, ConnectionManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireContextRemovedEvent(_ContextID);
    }

    
    using CommonAPI::Stub<ConnectionManagerStubAdapter, ConnectionManagerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<ConnectionManagerStubAdapter, ConnectionManagerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<ConnectionManagerStubAdapter, ConnectionManagerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef ConnectionManagerStubRemoteEvent RemoteEventType;
    typedef ConnectionManager StubInterface;
};

} // namespace Telephony
} // namespace DCU
} // namespace v0


// Compatibility
namespace v0_93 = v0;

#endif // V0_DCU_TELEPHONY_Connection_Manager_STUB_HPP_
