/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * DCU's System Service CommonTypes
 */
#ifndef V0_DCU_TELEPHONY_Common_Types_HPP_
#define V0_DCU_TELEPHONY_Common_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace DCU {
namespace Telephony {

struct CommonTypes {
    
    struct DeactivateReason : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            OPERATOR_DETERMINED_BARRING = 0,
            INSUFFICIENT_RESOURCES = 1,
            UNKNOWN_APN = 2,
            UNKNOWN_PDP = 3,
            AUTH_FAILED = 4,
            GGSN_REJECT = 5,
            OPTION_NOT_SUPPORTED = 6,
            OPTION_UNSUBSCRIBED = 7,
            OPTION_TEMP_OOO = 8,
            IP_V4_ONLY_ALLOWED = 9,
            IP_V6_ONLY_ALLOWED = 10,
            PROTOCOL_ERROR = 11,
            UNKNOWN_ERROR = 12
        };
    
        DeactivateReason()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::OPERATOR_DETERMINED_BARRING)) {}
        DeactivateReason(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::OPERATOR_DETERMINED_BARRING):
                case static_cast< int32_t>(Literal::INSUFFICIENT_RESOURCES):
                case static_cast< int32_t>(Literal::UNKNOWN_APN):
                case static_cast< int32_t>(Literal::UNKNOWN_PDP):
                case static_cast< int32_t>(Literal::AUTH_FAILED):
                case static_cast< int32_t>(Literal::GGSN_REJECT):
                case static_cast< int32_t>(Literal::OPTION_NOT_SUPPORTED):
                case static_cast< int32_t>(Literal::OPTION_UNSUBSCRIBED):
                case static_cast< int32_t>(Literal::OPTION_TEMP_OOO):
                case static_cast< int32_t>(Literal::IP_V4_ONLY_ALLOWED):
                case static_cast< int32_t>(Literal::IP_V6_ONLY_ALLOWED):
                case static_cast< int32_t>(Literal::PROTOCOL_ERROR):
                case static_cast< int32_t>(Literal::UNKNOWN_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DeactivateReason &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DeactivateReason &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DeactivateReason &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DeactivateReason &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DeactivateReason &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DeactivateReason &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    /*
     * description: 
     * ConnectionContext Object with Uuid identifier
     */
    struct ConnectionContextItem : CommonAPI::Struct< std::string, bool, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::vector< std::string >, std::string, std::string, std::string, std::string, std::string, std::vector< std::string >, std::string, std::string, std::string> {
    
        ConnectionContextItem()
        {
            std::get< 0>(values_) = "";
            std::get< 1>(values_) = false;
            std::get< 2>(values_) = "";
            std::get< 3>(values_) = "";
            std::get< 4>(values_) = "";
            std::get< 5>(values_) = "";
            std::get< 6>(values_) = "";
            std::get< 7>(values_) = "";
            std::get< 8>(values_) = "";
            std::get< 9>(values_) = "";
            std::get< 10>(values_) = "";
            std::get< 11>(values_) = "";
            std::get< 12>(values_) = std::vector< std::string >();
            std::get< 13>(values_) = "";
            std::get< 14>(values_) = "";
            std::get< 15>(values_) = "";
            std::get< 16>(values_) = "";
            std::get< 17>(values_) = "";
            std::get< 18>(values_) = std::vector< std::string >();
            std::get< 19>(values_) = "";
            std::get< 20>(values_) = "";
            std::get< 21>(values_) = "";
        }
        ConnectionContextItem(const std::string &_ContextID, const bool &_Active, const std::string &_AccessPointName, const std::string &_Type, const std::string &_Username, const std::string &_Password, const std::string &_Protocol, const std::string &_Name, const std::string &_Settings_Interface, const std::string &_Settings_Method, const std::string &_Settings_Address, const std::string &_Settings_Netmask, const std::vector< std::string > &_Settings_DomainNameServers, const std::string &_Settings_Gateway, const std::string &_Settings_Proxy, const std::string &_IPv6_Settings_Interface, const std::string &_IPv6_Settings_Address, const std::string &_IPv6_Settings_PrefixLength, const std::vector< std::string > &_IPv6_Settings_DomainNameServers, const std::string &_IPv6_Settings_Gateway, const std::string &_MessageProxy, const std::string &_MessageCenter)
        {
            std::get< 0>(values_) = _ContextID;
            std::get< 1>(values_) = _Active;
            std::get< 2>(values_) = _AccessPointName;
            std::get< 3>(values_) = _Type;
            std::get< 4>(values_) = _Username;
            std::get< 5>(values_) = _Password;
            std::get< 6>(values_) = _Protocol;
            std::get< 7>(values_) = _Name;
            std::get< 8>(values_) = _Settings_Interface;
            std::get< 9>(values_) = _Settings_Method;
            std::get< 10>(values_) = _Settings_Address;
            std::get< 11>(values_) = _Settings_Netmask;
            std::get< 12>(values_) = _Settings_DomainNameServers;
            std::get< 13>(values_) = _Settings_Gateway;
            std::get< 14>(values_) = _Settings_Proxy;
            std::get< 15>(values_) = _IPv6_Settings_Interface;
            std::get< 16>(values_) = _IPv6_Settings_Address;
            std::get< 17>(values_) = _IPv6_Settings_PrefixLength;
            std::get< 18>(values_) = _IPv6_Settings_DomainNameServers;
            std::get< 19>(values_) = _IPv6_Settings_Gateway;
            std::get< 20>(values_) = _MessageProxy;
            std::get< 21>(values_) = _MessageCenter;
        }
        inline const std::string &getContextID() const { return std::get< 0>(values_); }
        inline void setContextID(const std::string &_value) { std::get< 0>(values_) = _value; }
        inline const bool &getActive() const { return std::get< 1>(values_); }
        inline void setActive(const bool _value) { std::get< 1>(values_) = _value; }
        inline const std::string &getAccessPointName() const { return std::get< 2>(values_); }
        inline void setAccessPointName(const std::string &_value) { std::get< 2>(values_) = _value; }
        inline const std::string &getType() const { return std::get< 3>(values_); }
        inline void setType(const std::string &_value) { std::get< 3>(values_) = _value; }
        inline const std::string &getUsername() const { return std::get< 4>(values_); }
        inline void setUsername(const std::string &_value) { std::get< 4>(values_) = _value; }
        inline const std::string &getPassword() const { return std::get< 5>(values_); }
        inline void setPassword(const std::string &_value) { std::get< 5>(values_) = _value; }
        inline const std::string &getProtocol() const { return std::get< 6>(values_); }
        inline void setProtocol(const std::string &_value) { std::get< 6>(values_) = _value; }
        inline const std::string &getName() const { return std::get< 7>(values_); }
        inline void setName(const std::string &_value) { std::get< 7>(values_) = _value; }
        inline const std::string &getSettings_Interface() const { return std::get< 8>(values_); }
        inline void setSettings_Interface(const std::string &_value) { std::get< 8>(values_) = _value; }
        inline const std::string &getSettings_Method() const { return std::get< 9>(values_); }
        inline void setSettings_Method(const std::string &_value) { std::get< 9>(values_) = _value; }
        inline const std::string &getSettings_Address() const { return std::get< 10>(values_); }
        inline void setSettings_Address(const std::string &_value) { std::get< 10>(values_) = _value; }
        inline const std::string &getSettings_Netmask() const { return std::get< 11>(values_); }
        inline void setSettings_Netmask(const std::string &_value) { std::get< 11>(values_) = _value; }
        inline const std::vector< std::string > &getSettings_DomainNameServers() const { return std::get< 12>(values_); }
        inline void setSettings_DomainNameServers(const std::vector< std::string > &_value) { std::get< 12>(values_) = _value; }
        inline const std::string &getSettings_Gateway() const { return std::get< 13>(values_); }
        inline void setSettings_Gateway(const std::string &_value) { std::get< 13>(values_) = _value; }
        inline const std::string &getSettings_Proxy() const { return std::get< 14>(values_); }
        inline void setSettings_Proxy(const std::string &_value) { std::get< 14>(values_) = _value; }
        inline const std::string &getIPv6_Settings_Interface() const { return std::get< 15>(values_); }
        inline void setIPv6_Settings_Interface(const std::string &_value) { std::get< 15>(values_) = _value; }
        inline const std::string &getIPv6_Settings_Address() const { return std::get< 16>(values_); }
        inline void setIPv6_Settings_Address(const std::string &_value) { std::get< 16>(values_) = _value; }
        inline const std::string &getIPv6_Settings_PrefixLength() const { return std::get< 17>(values_); }
        inline void setIPv6_Settings_PrefixLength(const std::string &_value) { std::get< 17>(values_) = _value; }
        inline const std::vector< std::string > &getIPv6_Settings_DomainNameServers() const { return std::get< 18>(values_); }
        inline void setIPv6_Settings_DomainNameServers(const std::vector< std::string > &_value) { std::get< 18>(values_) = _value; }
        inline const std::string &getIPv6_Settings_Gateway() const { return std::get< 19>(values_); }
        inline void setIPv6_Settings_Gateway(const std::string &_value) { std::get< 19>(values_) = _value; }
        inline const std::string &getMessageProxy() const { return std::get< 20>(values_); }
        inline void setMessageProxy(const std::string &_value) { std::get< 20>(values_) = _value; }
        inline const std::string &getMessageCenter() const { return std::get< 21>(values_); }
        inline void setMessageCenter(const std::string &_value) { std::get< 21>(values_) = _value; }
        inline bool operator==(const ConnectionContextItem& _other) const {
        return (getContextID() == _other.getContextID() && getActive() == _other.getActive() && getAccessPointName() == _other.getAccessPointName() && getType() == _other.getType() && getUsername() == _other.getUsername() && getPassword() == _other.getPassword() && getProtocol() == _other.getProtocol() && getName() == _other.getName() && getSettings_Interface() == _other.getSettings_Interface() && getSettings_Method() == _other.getSettings_Method() && getSettings_Address() == _other.getSettings_Address() && getSettings_Netmask() == _other.getSettings_Netmask() && getSettings_DomainNameServers() == _other.getSettings_DomainNameServers() && getSettings_Gateway() == _other.getSettings_Gateway() && getSettings_Proxy() == _other.getSettings_Proxy() && getIPv6_Settings_Interface() == _other.getIPv6_Settings_Interface() && getIPv6_Settings_Address() == _other.getIPv6_Settings_Address() && getIPv6_Settings_PrefixLength() == _other.getIPv6_Settings_PrefixLength() && getIPv6_Settings_DomainNameServers() == _other.getIPv6_Settings_DomainNameServers() && getIPv6_Settings_Gateway() == _other.getIPv6_Settings_Gateway() && getMessageProxy() == _other.getMessageProxy() && getMessageCenter() == _other.getMessageCenter());
        }
        inline bool operator!=(const ConnectionContextItem &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * ConnectionContextStruct with properties. Every Properties are readonly
     */
    struct ConnnectionContextStruct : CommonAPI::Struct< bool, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::vector< std::string >, std::string, std::string, std::string, std::string, std::string, std::vector< std::string >, std::string, std::string, std::string> {
    
        ConnnectionContextStruct()
        {
            std::get< 0>(values_) = false;
            std::get< 1>(values_) = "";
            std::get< 2>(values_) = "";
            std::get< 3>(values_) = "";
            std::get< 4>(values_) = "";
            std::get< 5>(values_) = "";
            std::get< 6>(values_) = "";
            std::get< 7>(values_) = "";
            std::get< 8>(values_) = "";
            std::get< 9>(values_) = "";
            std::get< 10>(values_) = "";
            std::get< 11>(values_) = std::vector< std::string >();
            std::get< 12>(values_) = "";
            std::get< 13>(values_) = "";
            std::get< 14>(values_) = "";
            std::get< 15>(values_) = "";
            std::get< 16>(values_) = "";
            std::get< 17>(values_) = std::vector< std::string >();
            std::get< 18>(values_) = "";
            std::get< 19>(values_) = "";
            std::get< 20>(values_) = "";
        }
        ConnnectionContextStruct(const bool &_Active, const std::string &_AccessPointName, const std::string &_Type, const std::string &_Username, const std::string &_Password, const std::string &_Protocol, const std::string &_Name, const std::string &_Settings_Interface, const std::string &_Settings_Method, const std::string &_Settings_Address, const std::string &_Settings_Netmask, const std::vector< std::string > &_Settings_DomainNameServers, const std::string &_Settings_Gateway, const std::string &_Settings_Proxy, const std::string &_IPv6_Settings_Interface, const std::string &_IPv6_Settings_Address, const std::string &_IPv6_Settings_PrefixLength, const std::vector< std::string > &_IPv6_Settings_DomainNameServers, const std::string &_IPv6_Settings_Gateway, const std::string &_MessageProxy, const std::string &_MessageCenter)
        {
            std::get< 0>(values_) = _Active;
            std::get< 1>(values_) = _AccessPointName;
            std::get< 2>(values_) = _Type;
            std::get< 3>(values_) = _Username;
            std::get< 4>(values_) = _Password;
            std::get< 5>(values_) = _Protocol;
            std::get< 6>(values_) = _Name;
            std::get< 7>(values_) = _Settings_Interface;
            std::get< 8>(values_) = _Settings_Method;
            std::get< 9>(values_) = _Settings_Address;
            std::get< 10>(values_) = _Settings_Netmask;
            std::get< 11>(values_) = _Settings_DomainNameServers;
            std::get< 12>(values_) = _Settings_Gateway;
            std::get< 13>(values_) = _Settings_Proxy;
            std::get< 14>(values_) = _IPv6_Settings_Interface;
            std::get< 15>(values_) = _IPv6_Settings_Address;
            std::get< 16>(values_) = _IPv6_Settings_PrefixLength;
            std::get< 17>(values_) = _IPv6_Settings_DomainNameServers;
            std::get< 18>(values_) = _IPv6_Settings_Gateway;
            std::get< 19>(values_) = _MessageProxy;
            std::get< 20>(values_) = _MessageCenter;
        }
        /*
         * description: 
         */
        inline const bool &getActive() const { return std::get< 0>(values_); }
        inline void setActive(const bool _value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getAccessPointName() const { return std::get< 1>(values_); }
        inline void setAccessPointName(const std::string &_value) { std::get< 1>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getType() const { return std::get< 2>(values_); }
        inline void setType(const std::string &_value) { std::get< 2>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getUsername() const { return std::get< 3>(values_); }
        inline void setUsername(const std::string &_value) { std::get< 3>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getPassword() const { return std::get< 4>(values_); }
        inline void setPassword(const std::string &_value) { std::get< 4>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getProtocol() const { return std::get< 5>(values_); }
        inline void setProtocol(const std::string &_value) { std::get< 5>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getName() const { return std::get< 6>(values_); }
        inline void setName(const std::string &_value) { std::get< 6>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getSettings_Interface() const { return std::get< 7>(values_); }
        inline void setSettings_Interface(const std::string &_value) { std::get< 7>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getSettings_Method() const { return std::get< 8>(values_); }
        inline void setSettings_Method(const std::string &_value) { std::get< 8>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getSettings_Address() const { return std::get< 9>(values_); }
        inline void setSettings_Address(const std::string &_value) { std::get< 9>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getSettings_Netmask() const { return std::get< 10>(values_); }
        inline void setSettings_Netmask(const std::string &_value) { std::get< 10>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::vector< std::string > &getSettings_DomainNameServers() const { return std::get< 11>(values_); }
        inline void setSettings_DomainNameServers(const std::vector< std::string > &_value) { std::get< 11>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getSettings_Gateway() const { return std::get< 12>(values_); }
        inline void setSettings_Gateway(const std::string &_value) { std::get< 12>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getSettings_Proxy() const { return std::get< 13>(values_); }
        inline void setSettings_Proxy(const std::string &_value) { std::get< 13>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getIPv6_Settings_Interface() const { return std::get< 14>(values_); }
        inline void setIPv6_Settings_Interface(const std::string &_value) { std::get< 14>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getIPv6_Settings_Address() const { return std::get< 15>(values_); }
        inline void setIPv6_Settings_Address(const std::string &_value) { std::get< 15>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getIPv6_Settings_PrefixLength() const { return std::get< 16>(values_); }
        inline void setIPv6_Settings_PrefixLength(const std::string &_value) { std::get< 16>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::vector< std::string > &getIPv6_Settings_DomainNameServers() const { return std::get< 17>(values_); }
        inline void setIPv6_Settings_DomainNameServers(const std::vector< std::string > &_value) { std::get< 17>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getIPv6_Settings_Gateway() const { return std::get< 18>(values_); }
        inline void setIPv6_Settings_Gateway(const std::string &_value) { std::get< 18>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getMessageProxy() const { return std::get< 19>(values_); }
        inline void setMessageProxy(const std::string &_value) { std::get< 19>(values_) = _value; }
        /*
         * description: 
         */
        inline const std::string &getMessageCenter() const { return std::get< 20>(values_); }
        inline void setMessageCenter(const std::string &_value) { std::get< 20>(values_) = _value; }
        inline bool operator==(const ConnnectionContextStruct& _other) const {
        return (getActive() == _other.getActive() && getAccessPointName() == _other.getAccessPointName() && getType() == _other.getType() && getUsername() == _other.getUsername() && getPassword() == _other.getPassword() && getProtocol() == _other.getProtocol() && getName() == _other.getName() && getSettings_Interface() == _other.getSettings_Interface() && getSettings_Method() == _other.getSettings_Method() && getSettings_Address() == _other.getSettings_Address() && getSettings_Netmask() == _other.getSettings_Netmask() && getSettings_DomainNameServers() == _other.getSettings_DomainNameServers() && getSettings_Gateway() == _other.getSettings_Gateway() && getSettings_Proxy() == _other.getSettings_Proxy() && getIPv6_Settings_Interface() == _other.getIPv6_Settings_Interface() && getIPv6_Settings_Address() == _other.getIPv6_Settings_Address() && getIPv6_Settings_PrefixLength() == _other.getIPv6_Settings_PrefixLength() && getIPv6_Settings_DomainNameServers() == _other.getIPv6_Settings_DomainNameServers() && getIPv6_Settings_Gateway() == _other.getIPv6_Settings_Gateway() && getMessageProxy() == _other.getMessageProxy() && getMessageCenter() == _other.getMessageCenter());
        }
        inline bool operator!=(const ConnnectionContextStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct ContextError : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NoError = 0,
            InProgress = 1,
            Failed = 2
        };
    
        ContextError()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NoError)) {}
        ContextError(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NoError):
                case static_cast< int32_t>(Literal::InProgress):
                case static_cast< int32_t>(Literal::Failed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ContextError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ContextError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ContextError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ContextError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ContextError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ContextError &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct AddContextError : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NoError = 0,
            InvalidArguments = 1,
            InvalidFormat = 2,
            Failed = 3
        };
    
        AddContextError()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NoError)) {}
        AddContextError(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NoError):
                case static_cast< int32_t>(Literal::InvalidArguments):
                case static_cast< int32_t>(Literal::InvalidFormat):
                case static_cast< int32_t>(Literal::Failed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AddContextError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AddContextError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AddContextError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AddContextError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AddContextError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AddContextError &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct RemoveContextError : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NoError = 0,
            InProgress = 1,
            InvalidArguments = 2,
            InvalidFormat = 3,
            NotFound = 4,
            Failed = 5
        };
    
        RemoveContextError()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NoError)) {}
        RemoveContextError(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NoError):
                case static_cast< int32_t>(Literal::InProgress):
                case static_cast< int32_t>(Literal::InvalidArguments):
                case static_cast< int32_t>(Literal::InvalidFormat):
                case static_cast< int32_t>(Literal::NotFound):
                case static_cast< int32_t>(Literal::Failed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RemoveContextError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RemoveContextError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RemoveContextError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RemoveContextError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RemoveContextError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RemoveContextError &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct ContextStatus : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            CONNECTING = 0,
            CONNECTED = 1,
            DISCONNECTED = 2
        };
    
        ContextStatus()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::CONNECTING)) {}
        ContextStatus(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::CONNECTING):
                case static_cast< int32_t>(Literal::CONNECTED):
                case static_cast< int32_t>(Literal::DISCONNECTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ContextStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ContextStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ContextStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ContextStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ContextStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ContextStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    
    struct GetContextError : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NoError = 0,
            InvalidArguments = 1,
            InvalidFormat = 2,
            Failed = 3
        };
    
        GetContextError()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NoError)) {}
        GetContextError(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NoError):
                case static_cast< int32_t>(Literal::InvalidArguments):
                case static_cast< int32_t>(Literal::InvalidFormat):
                case static_cast< int32_t>(Literal::Failed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GetContextError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GetContextError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GetContextError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GetContextError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GetContextError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GetContextError &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };
    /*
     * description: 
     * VariantType
     */
    typedef CommonAPI::Variant< int32_t, uint32_t, int64_t, uint64_t, bool, float, double, std::string>  VariantType;
    /*
     * description: 
     * Unified data structure similar to "sv"
     */
    typedef std::unordered_map< std::string, ::v0::DCU::Telephony::CommonTypes::VariantType> StringVariantDict;
    /*
     * description: 
     * Unified data structure similar to "a{sv}"
     */
    typedef std::vector< CommonTypes::StringVariantDict> AttributeList;
    
    struct SetPropertyError : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NoError = 0,
            InProgress = 1,
            InvalidArguments = 2,
            InvalidFormat = 3,
            NotImplemented = 4,
            Failed = 5
        };
    
        SetPropertyError()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NoError)) {}
        SetPropertyError(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NoError):
                case static_cast< int32_t>(Literal::InProgress):
                case static_cast< int32_t>(Literal::InvalidArguments):
                case static_cast< int32_t>(Literal::InvalidFormat):
                case static_cast< int32_t>(Literal::NotImplemented):
                case static_cast< int32_t>(Literal::Failed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SetPropertyError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SetPropertyError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SetPropertyError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SetPropertyError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SetPropertyError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SetPropertyError &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "DCU.Telephony.CommonTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 93);
}

}; // struct CommonTypes

} // namespace Telephony
} // namespace DCU
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for DeactivateReason
    template<>
    struct hash< ::v0::DCU::Telephony::CommonTypes::DeactivateReason> {
        inline size_t operator()(const ::v0::DCU::Telephony::CommonTypes::DeactivateReason& deactivateReason) const {
            return static_cast< int32_t>(deactivateReason);
        }
    };
    //Hash for ContextError
    template<>
    struct hash< ::v0::DCU::Telephony::CommonTypes::ContextError> {
        inline size_t operator()(const ::v0::DCU::Telephony::CommonTypes::ContextError& contextError) const {
            return static_cast< int32_t>(contextError);
        }
    };
    //Hash for AddContextError
    template<>
    struct hash< ::v0::DCU::Telephony::CommonTypes::AddContextError> {
        inline size_t operator()(const ::v0::DCU::Telephony::CommonTypes::AddContextError& addContextError) const {
            return static_cast< int32_t>(addContextError);
        }
    };
    //Hash for RemoveContextError
    template<>
    struct hash< ::v0::DCU::Telephony::CommonTypes::RemoveContextError> {
        inline size_t operator()(const ::v0::DCU::Telephony::CommonTypes::RemoveContextError& removeContextError) const {
            return static_cast< int32_t>(removeContextError);
        }
    };
    //Hash for ContextStatus
    template<>
    struct hash< ::v0::DCU::Telephony::CommonTypes::ContextStatus> {
        inline size_t operator()(const ::v0::DCU::Telephony::CommonTypes::ContextStatus& contextStatus) const {
            return static_cast< int32_t>(contextStatus);
        }
    };
    //Hash for GetContextError
    template<>
    struct hash< ::v0::DCU::Telephony::CommonTypes::GetContextError> {
        inline size_t operator()(const ::v0::DCU::Telephony::CommonTypes::GetContextError& getContextError) const {
            return static_cast< int32_t>(getContextError);
        }
    };
    //Hash for SetPropertyError
    template<>
    struct hash< ::v0::DCU::Telephony::CommonTypes::SetPropertyError> {
        inline size_t operator()(const ::v0::DCU::Telephony::CommonTypes::SetPropertyError& setPropertyError) const {
            return static_cast< int32_t>(setPropertyError);
        }
    };
}


// Compatibility
namespace v0_93 = v0;

#endif // V0_DCU_TELEPHONY_Common_Types_HPP_
