/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * DCU's System Service CommonTypes
 */
#ifndef V0_DCU_TELEPHONY_Common_Types_HPP_
#define V0_DCU_TELEPHONY_Common_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace DCU {
namespace Telephony {

struct CommonTypes {
    /*
     * description: 
     * VariantType
     */
    typedef CommonAPI::Variant< int32_t, uint32_t, int64_t, uint64_t, bool, float, double, std::string>  VariantType;
    /*
     * description: 
     * Unified data structure similar to "sv"
     */
    typedef std::unordered_map< std::string, ::v0::DCU::Telephony::CommonTypes::VariantType> StringVariantDict;
    /*
     * description: 
     * Unified data structure similar to "a{sv}"
     */
    typedef std::vector< CommonTypes::StringVariantDict> AttributeList;
    
    struct SetPropertyError : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            NoError = 0,
            InProgress = 1,
            InvalidArguments = 2,
            InvalidFormat = 3,
            NotImplemented = 4,
            Failed = 5
        };
    
        SetPropertyError()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::NoError)) {}
        SetPropertyError(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::NoError):
                case static_cast< int32_t>(Literal::InProgress):
                case static_cast< int32_t>(Literal::InvalidArguments):
                case static_cast< int32_t>(Literal::InvalidFormat):
                case static_cast< int32_t>(Literal::NotImplemented):
                case static_cast< int32_t>(Literal::Failed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SetPropertyError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SetPropertyError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SetPropertyError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SetPropertyError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SetPropertyError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SetPropertyError &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "DCU.Telephony.CommonTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 93);
}

}; // struct CommonTypes

} // namespace Telephony
} // namespace DCU
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for SetPropertyError
    template<>
    struct hash< ::v0::DCU::Telephony::CommonTypes::SetPropertyError> {
        inline size_t operator()(const ::v0::DCU::Telephony::CommonTypes::SetPropertyError& setPropertyError) const {
            return static_cast< int32_t>(setPropertyError);
        }
    };
}


// Compatibility
namespace v0_93 = v0;

#endif // V0_DCU_TELEPHONY_Common_Types_HPP_
